class DomReplay
  constructor: (debugmode, config=null) ->
    console.log "debugmode is set to #{debugmode}"
    @util = new Util(debugmode)

    @PASSIVE_STATE = 0
    @RECORD_STATE = 1
    @REPLAY_STATE = 2
    @current_operating_state = @PASSIVE_STATE

    @storage = new Storage this
    @handler = new Handler this
    @dom_loader = new DOMLoader this
    @replay = new Replay this

    if config == null
      @config =
        click:
          tagnames: ['a', 'button']
          handler: @handler.handle_click_event
        input:
          tagnames: ['input', 'select', 'textarea']
          handler: @handler.handle_input_event
          delay: 100

  set_operating_state_replay: ->
    @current_operating_state = @REPLAY_STATE

  set_operating_state_record: ->
    @current_operating_state = @RECORD_STATE

  set_operating_state_passive: ->
    @current_operating_state = @PASSIVE_STATE

  operating_state_is_recording: ->
    @current_operating_state == @RECORD_STATE

  operating_state_is_replaying: ->
    @current_operating_state == @REPLAY_STATE

  operating_state_is_passive: ->
    @current_operating_state == @PASSIVE_STATE

  initialize_tracking: () ->
    if @operating_state_is_recording()
      @util.debug "cancelling initialization of recording due to recording already being in progress."
      return
    @util.debug 'running initial load!'

    time = setInterval( () =>
      @util.debug 'running readyState-check'
      if document.readyState != 'complete'
        @util.debug 'document not yet ready - postponing initialization'
        return
      clearInterval time
      @initialize_modules()
      return
      100)

  initialize_modules: ->
    @util.debug "running initialize_modules"

    @dom_loader.initialize_events()

    @dom_loader.initialize_mutation_observer()
    @util.debug "all modules initialized"
    @set_operating_state_record()

  get_playback_object: ->
    return @replay

@setup_test_buttons = (domreplay_object, parent_id, index) ->
  ###
  A simple function to add a couple of buttons after the initial loading of elements has occurred.
  This is to simulate elements created by other frameworks, such as AngularJS and jQuery.
  ###
  domreplay_object.util.debug "settings up test buttons"

  parent = document.getElementById parent_id

  div = document.createElement "div"
  div.className = "col-sm-12"
  div.id = "autogen_div_#{index}"

  header = document.createElement "h3"
  header.innerText = "Autogenerated elements, group #{index}:"
  header.id = "autogen_header_#{index}"

  test_button = document.createElement "button"
  test_button.className = "btn btn-primary"
  test_button.innerText = "I am generated by JS"
  test_button.id = "test_button_#{index}"
  test_button.name = "test_button_#{index}"

  test_input_area = document.createElement "input"
  test_input_area.type = "text"
  test_input_area.id = "autogenerated_textinput_#{index}"
  test_input_area.name = "autogenerated_textinput_#{index}"

  parent.appendChild div
  div.appendChild header
  div.appendChild test_button
  div.appendChild test_input_area
  return

@DOMReplay_initial_load = (debugmode) ->
  dr = new DomReplay(debugmode)
  dr
